# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  street1: String!
  street2: String
  city: String!
  state: String!
  zipcode: String!
}

input AddressInput {
  street1: String!
  street2: String
  city: String!
  state: String!
  zipcode: String!
}

type Book {
  id: ID!
  title: String!
  description: String
  author: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Location {
  address: String!
  lat: Float!
  lng: Float!
}

input LocationInput {
  address: String!
  lat: Float!
  lng: Float!
}

type Mutation {
  createNeed(newNeedData: NewNeedInput!): Need!
  signUp(newUserData: NewUserInput!): User!
  signIn(userSigninInput: UserSignInInput!): User!
  signOut: Boolean!
  updateUser(userInput: UserInput!): User!
}

type Need {
  id: ID!
  title: String!
  recipient: User!
  volunteer: User
  location: Location!
  date: DateTime!
  notes: String!
  needType: NeedType!
}

"""The type of need requested."""
enum NeedType {
  TRAVEL
  LAWNCARE
  CHILDCARE
  HOME_MAINTENANCE
}

input NewNeedInput {
  title: String!
  volunteer: String
  location: LocationInput!
  date: DateTime!
  notes: String!
  needType: NeedType!
}

input NewUserInput {
  firstName: String!
  middleName: String
  lastName: String!
  birthDate: Date!
  phone: String!
  address: AddressInput!
  email: String!
  password: String!
  confirmPassword: String!
}

type Query {
  book(id: String!): Book!
  books(skip: Int = 0, take: Int = 25): [Book!]!
  getNeeds: [Need!]!
  user(id: String!): User!
  users(skip: Int = 0, take: Int = 25): [User!]!
}

type User {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  fullName: String!
  birthDate: Date!
  phone: String!
  address: Address!
  email: String!
  location: String!
}

input UserInput {
  id: ID!
  firstName: String
  middleName: String
  lastName: String
  birthDate: Date
  phone: String
  address: AddressInput
  email: String
  password: String
  confirmPassword: String
}

input UserSignInInput {
  email: String!
  password: String!
}
